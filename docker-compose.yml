
services:
  # Base de datos Oracle
  oracle-db:
    image: container-registry.oracle.com/database/free:latest
    container_name: gestock-oracle-db
    environment:
      - ORACLE_PWD=${ORACLE_PWD}
      - ORACLE_CHARACTERSET=AL32UTF8
      - ORACLE_PDB=${ORACLE_PDB}
      - INIT_SGA_SIZE=${INIT_SGA_SIZE}
      - INIT_PGA_SIZE=${INIT_PGA_SIZE}
    ports:
      - "1539:1521"
    volumes:
      - oracle-data:/opt/oracle/oradata
      - ./oracle-db/init-scripts:/opt/oracle/scripts/startup
    networks:
      - gestock-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/opt/oracle/checkDBStatus.sh", "${ORACLE_PDB}"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s

  # Backend NestJS
  backend:
    build:
      # context: ./GeStock-Backend
      image: justjaaara/gestock-backend:latest
    container_name: gestock-backend
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=oracle-db
      - DB_PORT=${DB_PORT}
      - DB_SERVICE_NAME=${DB_SERVICE_NAME}
      - DB_USERNAME=GESTOCK
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SYNCHRONIZE=${DB_SYNCHRONIZE}
      - DB_LOGGING=${DB_LOGGING}
      - PORT=${PORT}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "3000:3000"
    depends_on:
      - oracle-db
    volumes:
      - ./GeStock-Backend/uploads:/app/uploads
    networks:
      - gestock-network
    restart: unless-stopped

  # Frontend Angular
  frontend:
    build:
      # context: ./GeStock-Frontend
      image: justjaaara/gestock-frontend:latest
    container_name: gestock-frontend
    ports:
      - "8080:8080"
    depends_on:
      - backend
    networks:
      - gestock-network
    restart: unless-stopped
    environment:
      - BACKENDBASEURL='http://backend:3000/api'


# Vol√∫menes persistentes
volumes:
  oracle-data:
    driver: local

# Red personalizada
networks:
  gestock-network:
    driver: bridge